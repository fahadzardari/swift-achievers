---
import DefaultImage from "../../assets/services/amazon-store-creation/listing.png";
import Image from "astro/components/Image.astro";
const {
  title,
  titleId,
  description,
  descriptionId,
  image,
  imageAlt,
  bulletPointHeadings = [],
  bulletPoints = [],
  aboutUs = false,
} = Astro.props;
import ConsultationImage from "../../assets/about-us/consultation.png";
import OperationalImage from "../../assets/about-us/operational.png";
import ReportingImage from "../../assets/about-us/reporting.png";
---

<section
  class="service-info-section flex flex-col gap-x-16 gap-y-4 md:flex-row md:items-center md:justify-between"
  data-section-id={Math.random().toString(36).substr(2, 9)}
>
  <Image
    src={image || DefaultImage}
    alt={imageAlt || "Scaling Products"}
    class="md:w-1/2"
  />
  <div class="flex flex-col gap-y-4 text-white">
    <h1
      class="3xl:text-[46px] text-2xl font-semibold md:text-3xl lg:text-4xl xl:text-[40px]"
      id={titleId}
    >
      {title}
    </h1>
    <p
      class="text-xs lg:text-sm 2xl:text-base"
      id={descriptionId}
      set:html={description}
    />
    {
      aboutUs && (
        <div class="mt-6 grid grid-cols-2 gap-4 md:grid-cols-3">
          <div class="flex flex-col items-center justify-center gap-y-2">
            <Image src={ConsultationImage} alt="Consultation" />
            <h3 class="text-xs lg:text-xs 2xl:text-sm">Expert consultation</h3>
          </div>
          <div class="flex flex-col items-center justify-center gap-y-2">
            <Image src={OperationalImage} alt="Operational Excellence" />
            <h3 class="text-xs lg:text-xs 2xl:text-sm">Operational help</h3>
          </div>
          <div class="flex flex-col items-center justify-center gap-y-2">
            <Image src={ReportingImage} alt="Reporting" />
            <h3 class="text-xs lg:text-xs 2xl:text-sm">
              Tracking and Reporting
            </h3>
          </div>
        </div>
      )
    }
    {
      bulletPointHeadings.map((heading, index) => (
        <div>
          <h3 class="text-lg font-semibold lg:text-xl 2xl:text-2xl" key={index}>
            {heading}
          </h3>
          <div class="mt-4 grid grid-cols-2 gap-4">
            {bulletPoints[index].map((point) => (
              <div class="flex items-center gap-x-2">
                <div class="flex h-[18px] w-[18px] flex-shrink-0 items-center justify-center">
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 18 18"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M13.1667 1.78332C14.4236 2.50904 15.4692 3.55043 16.1999 4.80441C16.9307 6.05839 17.3212 7.48147 17.3329 8.93277C17.3447 10.3841 16.9771 11.8133 16.2668 13.0789C15.5564 14.3445 14.5278 15.4027 13.2828 16.1486C12.0378 16.8945 10.6196 17.3023 9.1685 17.3317C7.71744 17.3611 6.28387 17.011 5.00971 16.316C3.73555 15.6211 2.66497 14.6054 1.90397 13.3696C1.14297 12.1337 0.717922 10.7206 0.670915 9.26999L0.666748 8.99999L0.670915 8.72999C0.717584 7.29082 1.13637 5.88829 1.88645 4.65915C2.63652 3.43001 3.69229 2.4162 4.95082 1.71656C6.20936 1.01692 7.6277 0.655322 9.06759 0.667023C10.5075 0.678724 11.9198 1.06332 13.1667 1.78332ZM12.0892 6.74416C11.9458 6.60068 11.7548 6.51449 11.5523 6.50175C11.3498 6.48902 11.1496 6.55062 10.9892 6.67499L10.9109 6.74416L8.16675 9.48749L7.08925 8.41082L7.01091 8.34166C6.85057 8.21737 6.65039 8.15585 6.44792 8.16862C6.24545 8.18139 6.05459 8.26759 5.91113 8.41104C5.76768 8.5545 5.68148 8.74536 5.66871 8.94783C5.65594 9.1503 5.71746 9.35048 5.84175 9.51082L5.91092 9.58916L7.57758 11.2558L7.65592 11.325C7.80206 11.4384 7.98178 11.4999 8.16675 11.4999C8.35172 11.4999 8.53144 11.4384 8.67758 11.325L8.75591 11.2558L12.0892 7.92249L12.1584 7.84416C12.2828 7.68382 12.3444 7.48361 12.3317 7.28109C12.3189 7.07857 12.2327 6.88765 12.0892 6.74416Z"
                      fill="#FD34FC"
                    />
                  </svg>
                </div>

                <span class="text-xs text-[#ffffff] capitalize md:text-xs lg:text-sm">
                  {point}
                </span>
              </div>
            ))}
          </div>
        </div>
      ))
    }
    <div class="mt-4 flex gap-x-4">
      <a
        class="open-contact-modal bg-gradient cursor-pointer rounded-full px-6 py-2 text-[11px] text-white md:text-xs lg:text-sm xl:text-base"
      >
        Get a Quote
      </a>
      <a
        class="cursor-pointer rounded-full border px-6 py-2 text-[11px] text-white md:text-xs lg:text-sm xl:text-base"
        href="tel:+19788502039"
        >
        +1 (978) 850-2039
      </a>
    </div>
  </div>
</section>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import SplitType from "split-type";

  // Register ScrollTrigger plugin
  gsap.registerPlugin(ScrollTrigger);

  // Select all instances of this component
  const sections = document.querySelectorAll(".service-info-section");

  // Create animations for each instance independently
  sections.forEach((section) => {
    const sectionId = section.dataset.sectionId;

    // Get elements to animate within this specific section
    const image = section.querySelector("img");
    const title = section.querySelector("h1");
    const description = section.querySelector("p");
    const bulletPointContainers = Array.from(
      section.querySelectorAll("div"),
    ).filter((div) => div.querySelector("h3"));
    const buttons = section.querySelectorAll(".mt-4.flex.gap-x-4 a");

    // Create timeline with ScrollTrigger
    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: section,
        start: "10% bottom", // Start when top of section hits bottom of viewport
        end: "bottom 70%", // End when bottom of section hits 70% down viewport
        scrub: 1, // Smooth scrubbing effect tied to scroll position
        toggleActions: "restart none none reverse",
        id: `service-${sectionId}`, // Unique identifier for this ScrollTrigger
        // markers: true,    // Uncomment for debugging
        once: false, // Ensure animation plays every time
      },
    });

    // Different animation for image based on screen size
    if (image) {
      // Check if we're on mobile
      const isMobile = window.innerWidth < 768; // 768px is the md breakpoint in Tailwind

      if (isMobile) {
        // For mobile: Use opacity and scale animation that doesn't affect layout
        tl.fromTo(
          image,
          { opacity: 0, scale: 0.95 },
          { opacity: 1, scale: 1, duration: 0.5 },
          0,
        );
      } else {
        // For desktop/tablet: Use the horizontal slide animation
        tl.fromTo(
          image,
          { x: -40, opacity: 0 },
          { x: 0, opacity: 1, duration: 0.5 },
          0,
        );
      }
    }

    // Animate title fading in from below
    if (title) {
      tl.fromTo(
        title,
        { y: 30, opacity: 0 },
        { y: 0, opacity: 1, duration: 0.5 },
        0.1,
      );
    }

    // Animate description fading in
    if (description) {
      tl.fromTo(
        description,
        { y: 20, opacity: 0 },
        { y: 0, opacity: 1, duration: 0.5 },
        0.2,
      );
    }

    // Animate bullet points with staggered effect
    bulletPointContainers.forEach((container, i) => {
      const heading = container.querySelector("h3");
      const bulletPoints = container.querySelectorAll(
        ".grid div.flex.items-center",
      );

      if (heading) {
        tl.fromTo(
          heading,
          { y: 15, opacity: 0 },
          { y: 0, opacity: 1, duration: 0.5 },
          0.3 + i * 0.05,
        );
      }

      if (bulletPoints.length > 0) {
        tl.fromTo(
          bulletPoints,
          { y: 15, opacity: 0 },
          { y: 0, opacity: 1, stagger: 0.05, duration: 0.5 },
          0.35 + i * 0.05,
        );
      }
    });

    // Animate buttons appearing with slight bounce
    if (buttons.length > 0) {
      tl.fromTo(
        buttons,
        { y: 10, opacity: 0 },
        { y: 0, opacity: 1, stagger: 0.1, duration: 0.5 },
        0.4,
      );
    }

    // Handle resize events to update animations if screen size changes
    window.addEventListener("resize", () => {
      // Refresh ScrollTrigger to update positions
      ScrollTrigger.refresh();

      // Get current mobile status
      const currentMobile = window.innerWidth < 768;

      // If image exists, update its animation based on new screen size
      if (image) {
        if (currentMobile) {
          // For mobile - reset any X transform and just use opacity/scale
          gsap.set(image, { x: 0 });
        }
      }
    });
  });
</script>
