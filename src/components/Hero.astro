---
import DefaultHero from "../assets/hero/home.png";
import Image from "astro/components/Image.astro";
const {
  backgroundImage = DefaultHero,
  title = "",
  subheading = "",
  descriptionHeading = "",
  description = "",
} = Astro.props;
---

<header id="hero-section" class="relative flex min-h-screen items-center pt-7">
  <div class="absolute inset-0 -z-50">
    <Image
      id="hero-bg"
      src={backgroundImage}
      alt="Hero background"
      class="h-full w-full object-cover"
      width={1920}
      height={1080}
    />
    <div
      id="hero-gradient"
      class="absolute inset-0 top-auto bottom-0 bg-linear-to-b from-transparent from-90% to-[#040243]"
    >
    </div>
  </div>
  <div id="hero-content" class="content container">
    <div id="hero-text-wrapper" class="w-full md:w-3/4 xl:w-[65%]">
      {
        subheading != "" && (
          <h3
            id="hero-subheading"
            class="3xl:text-2xl font-semibold text-white md:text-base lg:text-lg xl:text-xl"
          >
            {subheading}
          </h3>
        )
      }
      <h1
        id="hero-title"
        class="3xl:text-[70px] mt-4 text-4xl font-semibold text-white sm:text-5xl lg:text-5xl xl:mt-6 xl:text-6xl xl:leading-[66px] 2xl:text-[64px] 2xl:leading-[74px]"
      >
        {title}
      </h1>
      {
        descriptionHeading != "" && (
          <p
            id="hero-desc-heading"
            class="3xl:text-2xl mt-4 font-semibold text-white md:mt-6 md:text-base lg:text-lg xl:mt-8 xl:text-xl 2xl:mt-10"
          >
            {descriptionHeading}
          </p>
        )
      }
      <p
        id="hero-description"
        class="mt-3 max-w-[714px] text-xs text-[#ffffff] md:text-xs lg:mt-5 lg:text-sm xl:text-base"
      >
        {description}
      </p>
      <div id="hero-cta" class="mt-4 flex gap-x-4">
        <button
          id="hero-chat-btn"
          class="open-chat-widget bg-gradient cursor-pointer rounded-full px-6 py-2 text-[11px] text-white md:text-xs lg:text-sm xl:text-base"
        >
          Live Chat
        </button>
        <a
          id="hero-phone-btn"
          class="cursor-pointer rounded-full border px-6 py-2 text-[11px] text-white md:text-xs lg:text-sm xl:text-base"
          href="tel:+19788502039"
        >
          +1 (978) 850-2039
        </a>
      </div>
    </div>
  </div>
</header>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import SplitType from "split-type";

  // Register ScrollTrigger plugin
  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener("DOMContentLoaded", () => {
    // Initialize SplitType for text elements
    const heroTitle = new SplitType("#hero-title", { types: "words,chars" });
    const heroSubheading = document.getElementById("hero-subheading");
    const heroDescHeading = document.getElementById("hero-desc-heading");
    const heroDescription = new SplitType("#hero-description", {
      types: "lines",
    });

    // Create main timeline for initial load animations
    const mainTl = gsap.timeline({ defaults: { ease: "power2.out" } });

    // Add slight parallax effect on scroll for background
    gsap.fromTo(
      "#hero-bg",
      { y: 0 },
      {
        y: 100,
        ease: "none",
        scrollTrigger: {
          trigger: "#hero-section",
          start: "top top",
          end: "bottom top",
          scrub: 0.8,
        },
      },
    );

    // Add all animations to the main timeline in sequence

    // Start with the entire text wrapper container with a subtle reveal
    mainTl.fromTo(
      "#hero-text-wrapper",
      { opacity: 0 },
      { opacity: 1, duration: 0.5 },
      0,
    );

    // Start with subheading if it exists
    if (heroSubheading) {
      mainTl.fromTo(
        "#hero-subheading",
        { opacity: 0, x: -30 },
        { opacity: 1, x: 0, duration: 0.6 },
        0.2,
      );
    }

    // Animate title with staggered characters for emphasis
    mainTl.fromTo(
      heroTitle.chars,
      { opacity: 0, y: 50 },
      { opacity: 1, y: 0, stagger: 0.02, duration: 0.8 },
      0.4,
    );

    // Animate description heading if it exists
    if (heroDescHeading) {
      mainTl.fromTo(
        "#hero-desc-heading",
        { opacity: 0, y: 20 },
        { opacity: 1, y: 0, duration: 0.7 },
        0.8,
      );
    }

    // Animate description lines with staggered effect
    mainTl.fromTo(
      heroDescription.lines,
      { opacity: 0, y: 20 },
      { opacity: 1, y: 0, stagger: 0.1, duration: 0.7 },
      1.0,
    );

    // Animate CTA buttons with slight bounce
    mainTl.fromTo(
      "#hero-chat-btn",
      { opacity: 0, y: 30, scale: 0.9 },
      {
        opacity: 1,
        y: 0,
        scale: 1,
        duration: 0.6,
        ease: "back.out(1.2)",
      },
      1.3,
    );

    mainTl.fromTo(
      "#hero-phone-btn",
      { opacity: 0, y: 30, scale: 0.9 },
      {
        opacity: 1,
        y: 0,
        scale: 1,
        duration: 0.6,
        ease: "back.out(1.2)",
      },
      1.5,
    );

    // Add a subtle gradient animation
    mainTl.fromTo(
      "#hero-gradient",
      { opacity: 0 },
      { opacity: 1, duration: 1.5 },
      0.2,
    );
  });
</script>
